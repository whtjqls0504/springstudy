<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.myhome.dao.BlogMapper">

  <resultMap type="BlogDto" id="BlogMap">
    <!-- pk로 설정된 blog_no는 id 속성 값을 사용한다. -->
    <id     column="BLOG_NO"     property="blogNo"/> 
    <result column="TITLE"       property="title"/>
    <result column="CONTENTS"    property="contents"/>    
    <result column="HIT"         property="hit"/>
    <result column="IP"          property="ip"/>
    <result column="CREATED_AT"  property="createdAt"/>
    <result column="MODIFIED_AT" property="modifiedAt"/>
    
    <!-- blogDto는 association을 사용한다. -->
    <association javaType="UserDto"   property="userDto">
      <id     column="USER_NO"        property="userNo"/>
      <result column="EMAIL"          property="email"/>
      <result column="PW"             property="pw"/>
      <result column="NAME"           property="name"/>
      <result column="GENDER"         property="gender"/>
      <result column="MOBILE"         property="mobile"/>
      <result column="POSTCODE"       property="postcode"/>
      <result column="ROAD_ADDRESS"   property="roadAddress"/>
      <result column="JIBUN_ADDRESS"  property="jibunAddress"/>
      <result column="DETAIL_ADDRESS" property="detailAddress"/>
      <result column="AGREE"          property="agree"/>
      <result column="STATE"          property="state"/>
      <result column="PW_MODIFIED_AT" property="pwModifiedAt"/>
      <result column="JOINED_AT"      property="joinedAt"/>
    </association>
  </resultMap>
  <!--
    처리 순서
    1. BLOG_SEQ.NEXTVAL 값을 먼저(order="BEFORE") 파라미터로 전달된 BlogDto의 blogNo에 저장(keyProperty="blogNo")한다.
    2. 저장된 blogNo를 INSERT문에서 사용한다.
  -->
  <insert id="insertBlog" parameterType="BlogDto">
    <selectKey order="BEFORE" keyProperty="blogNo" resultType="int">
      SELECT BLOG_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>
    INSERT INTO BLOG_T(
        BLOG_NO
      , TITLE
      , CONTENTS
      , USER_NO
      , IP
      , CREATED_AT
      , MODIFIED_AT
    ) VALUES(
        #{blogNo}
      , #{title}
      , #{contents}
      , #{userDto.userNo}
      , #{ip}
      , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS')
      , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS')
    )
  </insert>
  
  <insert id="insertBlogImage" parameterType="BlogImageDto">
    INSERT INTO BLOG_IMAGE_T(
        BLOG_NO
      , IMAGE_PATH
      , FILESYSTEM_NAME
    ) VALUES(
        #{blogNo}
      , #{imagePath}
      , #{filesystemName}
    )
  </insert>
  
  <select id="getBlogImageInYesterday" resultType="BlogImageDto">
    SELECT BLOG_NO, IMAGE_PATH, FILESYSTEM_NAME
      FROM BLOG_IMAGE_T
     WHERE IMAGE_PATH = '/blog/' || TO_CHAR(SYSDATE - 1, 'YYYY/MM/DD')
  </select>
  
  <!-- 블로그의 갯수 -->
  <select id="getBlogCount" resultType="int">
    SELECT COUNT(*)
      FROM BLOG_T
  </select>
  
  <!-- 블로그 LIST (갯수와 함께 사용해라.) -->
  <select id="getBlogList" parameterType="Map" resultMap="BlogMap">
    SELECT A.BLOG_NO, A.TITLE, A.CONTENTS, A.USER_NO, A.HIT, A.IP, A.CREATED_AT, A.MODIFIED_AT, A.EMAIL
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY BLOG_NO DESC) AS RN, B.BLOG_NO , B.TITLE, B.CONTENTS, B.USER_NO, B.HIT, B.IP, B.CREATED_AT, B.MODIFIED_AT, U.EMAIL
                  FROM USER_T U INNER JOIN BLOG_T B
                      ON B.USER_NO = U.USER_NO) A
    WHERE A.RN BETWEEN #{begin} AND #{end}
  </select>
  
  
  
  
</mapper>